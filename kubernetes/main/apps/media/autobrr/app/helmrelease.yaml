---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: autobrr
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      autobrr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.6@sha256:35353a77777ee8f634d0f3945f495b4a40065134b8619e0d18bd49b0ee9c855b
            env:
              INIT_POSTGRES_DBNAME: &dbName autobrr
              INIT_POSTGRES_HOST: &dbHost postgres17-rw.database.svc.cluster.local
              INIT_POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &secret autobrr-secret
                    key: INIT_POSTGRES_USER
              INIT_POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: INIT_POSTGRES_PASS
              INIT_POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: INIT_POSTGRES_SUPER_PASS

        containers:
          oauth2-proxy:
            image:
              repository: quay.io/oauth2-proxy/oauth2-proxy
              tag: v7.7.1-amd64@sha256:95f2002754cb0f1c1553aed56f4d6564a5b860e01baccb4e1b8311ffa25c167c
            args:
              - --config=/etc/oauth2-proxy.cfg
            env:
              OAUTH2_PROXY_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_ID
              OAUTH2_PROXY_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_SECRET
              OAUTH2_PROXY_COOKIE_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: COOKIE_SECRET
              OAUTH2_PROXY_REDIS_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: REDIS_PASSWORD
              OAUTH2_PROXY_SESSION_STORE_TYPE: redis
              OAUTH2_PROXY_REDIS_CONNECTION_URL: redis://redis-master.database.svc.cluster.local:6379/10
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
              runAsUser: 2000
              runAsGroup: 2000

          app:
            image:
              repository: ghcr.io/autobrr/autobrr
              tag: v1.52.0@sha256:329307d54fcfc8a79536a2619b5b78a834706dd97ea34c50180f52591fe5ce01
            env:
              AUTOBRR__CHECK_FOR_UPDATES: "false"
              AUTOBRR__HOST: 127.0.0.1
              AUTOBRR__PORT: &port 80
              AUTOBRR__LOG_LEVEL: INFO
              AUTOBRR__DATABASE_TYPE: postgres
              AUTOBRR__POSTGRES_DATABASE: *dbName
              AUTOBRR__POSTGRES_HOST: *dbHost
              AUTOBRR__POSTGRES_PORT: 5432
              AUTOBRR__SESSION_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: AUTOBRR__SESSION_SECRET
              AUTOBRR__POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: INIT_POSTGRES_USER
              AUTOBRR__POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: AUTOBRR_POSTGRESS_ENCODED_PASS
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  exec:
                    command: ["/bin/sh", "-c", "curl -s http://localhost/api/healthz/liveness | grep 'OK' > /dev/null"]
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  exec:
                    command: ["/bin/sh", "-c", "curl -s http://localhost/api/healthz/readiness | grep 'OK' > /dev/null"]
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 256Mi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: autobrr
        ports:
          http:
            port: 4180

    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${PUBLIC_DOMAIN}
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        className: internal
        tls:
          - hosts:
              - &host "{{ .Release.Name }}.${PUBLIC_DOMAIN}"
            secretName: autobrr-tls
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      tmp:
        type: emptyDir

    oauth2-proxy-config:
        type: configMap
        name: autobrr-oauth2-proxy-config
        advancedMounts:
          autobrr:
            oauth2-proxy:
              - path: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true
