apiVersion: v1
kind: ConfigMap
metadata:
  name: expression
data:
  create-name-context-attribute-from-first_name-and-last_name-context-attributes.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Create name Context Attribute From first_name and last_name Context Attributes
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_blueprints.metaapplyblueprint
      attrs:
        identifiers:
          name: Expression Policy - Validate first_name and last_name Context Attributes
        required: true
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: create-name-context-attribute-from-first_name-and-last_name-context-attributes-expression-policy
      identifiers:
        name: create-name-context-attribute-from-first_name-and-last_name-context-attributes-expression-policy
      attrs:
        expression:  |
          result = ak_call_policy(
              "validate-first_name-and-last_name-context-attributes-expression-policy",
          )
          for msg in result.messages:
              ak_message(msg)

          if result.passing:
            first_name = request.context["prompt_data"]["first_name"]
            last_name = request.context["prompt_data"]["last_name"]
            request.context["prompt_data"]["name"] = f"{first_name} {last_name}"

          return result.passing
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-current_password-context-attribute-matches-user-password.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate current_password Context Attribute Matches User Password
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-current_password-context-attribute-matches-user-password-expression-policy
      identifiers:
        name: validate-current_password-context-attribute-matches-user-password-expression-policy
      attrs:
        expression:  |
          password = request.context.get("prompt_data", {}).get("current_password", "")

          match = request.user.check_password(password)
          if not match:
              ak_message("Wrong password")

          return match
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-email-context-attribute-is-different-than-currently-set.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate email Context Attribute Is Different Than Currently Set
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-email-context-attribute-is-different-than-currently-set-expression-policy
      identifiers:
        name: validate-email-context-attribute-is-different-than-currently-set-expression-policy
      attrs:
        expression:  |
          email = request.context.get("prompt_data", {}).get("email", "")
          return request.user.email != email
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-email-context-attribute-is-unique-to-current-user.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate email Context Attribute Is Unique to Current User
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-email-context-attribute-is-unique-to-current-user-expression-policy
      identifiers:
        name: validate-email-context-attribute-is-unique-to-current-user-expression-policy
      attrs:
        expression:  |
          email = request.context.get("prompt_data", {}).get("email")

          user = ak_user_by(email=email)

          if user and user != request.user:
            ak_message("This email is already in use.")
            return False

          return True
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-email-context-attribute-is-unique.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate email Context Attribute Is Unique
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-email-context-attribute-is-unique-expression-policy
      identifiers:
        name: validate-email-context-attribute-is-unique-expression-policy
      attrs:
        expression: |
          email = request.context.get("prompt_data", {}).get("email")
          if email:
            if ak_user_by(email=email):
              ak_message("This email is already in use.")
              return False

          return True
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-first_name-and-last_name-context-attributes.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate first_name and last_name Context Attributes
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_blueprints.metaapplyblueprint
      attrs:
        identifiers:
          name: Expression Policy - Validate Generic Prompt Field Data
        required: true
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-first_name-and-last-name-context-attributes-expression-policy
      identifiers:
        name: validate-first_name-and-last_name-context-attributes-expression-policy
      attrs:
        expression:  |
          from re import compile
          from authentik.lib.config import CONFIG

          USER_ATTRIBUTE_NAME_REGEX = "better-blueprints/users/name-regex"
          USER_ATTRIBUTE_NAME_VALIDATION_ERROR_MESSAGE = "better-blueprints/users/name-validation-error-message"

          # Check if the user is anonymous
          if request.user.is_anonymous:
              regex = CONFIG.get(
                  "better_blueprints_default.users.name_regex",
                  "^[a-zA-Z]{2,20}$"
              )
              err_msg = CONFIG.get(
                  "better_blueprints_default.users.name_validation_error_message",
                  "Names must contain only alphabetic characters and be between 2 and 20 characters long"
              )
          else:
              regex = request.user.group_attributes(request.http_request).get(
                  USER_ATTRIBUTE_NAME_REGEX,
                  CONFIG.get(
                      "better_blueprints_default.users.name_regex",
                      "^[a-zA-Z]{2,20}$"
                  )
              )
              err_msg = request.user.group_attributes(request.http_request).get(
                  USER_ATTRIBUTE_NAME_VALIDATION_ERROR_MESSAGE,
                  CONFIG.get(
                      "better_blueprints_default.users.name_validation_error_message",
                      "Names must contain only alphabetic characters and be between 2 and 20 characters long"
                  )
              )

          regex = compile(str(regex))

          result = ak_call_policy(
              "validate-generic-prompt-field-data-expression-policy",
              _validator=lambda x: regex_match(str(x), regex),
              _fields=("first_name", "last_name"),
          )

          if not result.passing and err_msg:
              ak_message(err_msg)

          return result.passing
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-generic-prompt-field-data.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate Generic Prompt Field Data
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-generic-prompt-field-data-expression-policy
      identifiers:
        name: validate-generic-prompt-field-data-expression-policy
      attrs:
        expression:  |
          # Designed to be called from other expression policies.
          # Used to validate arbitrary fields located in `request.context["prompt_data"]`
          # If any of the specied fields fail validation the policy returns `False`.
          #
          # It requires the following extra keys to be present in `request.context`:
          # - _validator: Callable[[Any], bool]
          #   A callable to use to validate all fields
          # - _fields: Union[List[str], Tuple[str, ...]]
          #   The keys of the fields in `request.context["prompt_data"]` which should
          #   be validated
          validator = request.context.get("_validator")
          fields = request.context.get("_fields")
          prompt_data = request.context.get("prompt_data")

          error = False

          if validator is None:
              ak_logger.warning(
                  "Validator was not provided in context",
                  context=request.context,
              )
              error = True

          if prompt_data is None:
              ak_logger.warning(
                  "prompt_data not present in context",
                  context=request.context,
              )
              error = True

          if not isinstance(fields, (tuple, list)) or not len(fields):
              ak_logger.warning(
                  "No field keys were provided in context",
                  context=request.context,
              )
              error = True

          if isinstance(fields, (tuple, list)) and prompt_data:
              for field in fields:
                  if field not in prompt_data:
                      ak_logger.warning(
                          f"{field} not in prompt_data",
                          prompt_data=prompt_data,
                      )
                      error = True

          if error:
              return False

          for field in fields:
              if not validator(prompt_data[field]):
                  return False

          return True
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-invitation-in-effect.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate Invitation in Effect
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-invitation-in-effect-expression-policy
      identifiers:
        name: validate-invitation-in-effect-expression-policy
      attrs:
        expression: return request.context.get("invitation_in_effect", False)
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-password.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate Password
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_blueprints.metaapplyblueprint
      attrs:
        identifiers:
          name: Password Policy - Default
        required: true

    - model: authentik_blueprints.metaapplyblueprint
      attrs:
        identifiers:
          name: Password Policy - Secure
        required: true
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-password-expression-policy
      identifiers:
        name: validate-password-expression-policy
      attrs:
        expression: |
          from authentik.lib.config import CONFIG

          USER_ATTRIBUTE_ADMIN_REQUIRE_SECURE_PASSWORD = "better-blueprints/admins/require-secure-password"
          USER_ATTRIBUTE_USER_REQUIRE_SECURE_PASSWORD = "better-blueprints/users/require-secure-password"

          # Check if the user is anonymous
          if request.user.is_anonymous:
              admin_policy_secure = CONFIG.get_bool(
                  "better_blueprints_default.admins.require_secure_password",
                  True
              )
              user_policy_secure = CONFIG.get_bool(
                  "better_blueprints_default.users.require_secure_password",
                  False
              )
          else:
              admin_policy_secure = request.user.group_attributes(request.http_request).get(
                  USER_ATTRIBUTE_ADMIN_REQUIRE_SECURE_PASSWORD,
                  CONFIG.get_bool(
                      "better_blueprints_default.admins.require_secure_password",
                      True
                  )
              )

              user_policy_secure = request.user.group_attributes(request.http_request).get(
                  USER_ATTRIBUTE_USER_REQUIRE_SECURE_PASSWORD,
                  CONFIG.get_bool(
                      "better_blueprints_default.users.require_secure_password",
                      False
                  )
              )

          if request.user.is_superuser:
              result = ak_call_policy(
                  "secure-password-policy" if admin_policy_secure else "default-password-policy"
              )
          else:
              result = ak_call_policy(
                  "secure-password-policy" if user_policy_secure else "default-password-policy"
              )

          for msg in result.messages:
              ak_message(msg)

          return result.passing

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-token-for-invitations-context-attribute.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate token For Invitations Context Attribute
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_blueprints.metaapplyblueprint
      attrs:
        identifiers:
          name: Expression Policy - Validate Generic Prompt Field Data
        required: true
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-token-for-invitations-context-attribute-expression-policy
      identifiers:
        name: validate-token-for-invitations-context-attribute-expression-policy
      attrs:
        expression:  |
          from uuid import UUID

          def validator(x):
              try:
                  if UUID(str(x)).version == 4:
                      return True
              except ValueError:
                  pass
              return False

          result = ak_call_policy(
              "validate-generic-prompt-field-data-expression-policy",
              _validator=validator,
              _fields=("token",),
          )

          if not result.passing:
              token = request.context.get("prompt_data", {}).get("token", "")
              ak_message('"' + str(token) + '"' + " is not a valid invitation.")

          return result.passing
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-username-context-attribute-is-unique-to-current-user.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate username Context Attribute Is Unique to Current User
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-username-context-attribute-is-unique-to-current-user-expression-policy
      identifiers:
        name: validate-username-context-attribute-is-unique-to-current-user-expression-policy
      attrs:
        expression:  |
          username = request.context.get("prompt_data", {}).get("username")

          user = ak_user_by(username=username)

          if user and user != request.user:
            ak_message("This username is already taken.")
            return False

          return True
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
  validate-username-email-and-name-change-is-allowed.yaml: |
    version: 1
    metadata:
      name: Expression Policy - Validate Username Email and Name Change Is Allowed
    context: {}
    entries:
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    - model: authentik_policies_expression.expressionpolicy
      id: validate-username-email-and-name-change-is-allowed-expression-policy
      identifiers:
        name: validate-username-email-and-name-change-is-allowed-expression-policy
      attrs:
        expression: |
          from authentik.lib.config import CONFIG
          from authentik.core.models import (
              USER_ATTRIBUTE_CHANGE_EMAIL,
              USER_ATTRIBUTE_CHANGE_NAME,
              USER_ATTRIBUTE_CHANGE_USERNAME
          )
          prompt_data = request.context.get("prompt_data")

          is_allowed = True

          if not request.user.group_attributes(request.http_request).get(
              USER_ATTRIBUTE_CHANGE_EMAIL, CONFIG.get("default_user_change_email", True)
          ):
              if prompt_data.get("email") != request.user.email:
                  ak_message("Not allowed to change email address.")
                  is_allowed = False

          if not request.user.group_attributes(request.http_request).get(
              USER_ATTRIBUTE_CHANGE_NAME, CONFIG.get("default_user_change_name", True)
          ):
              if prompt_data.get("name") != request.user.name:
                  ak_message("Not allowed to change name.")
                  is_allowed = False

          if not request.user.group_attributes(request.http_request).get(
              USER_ATTRIBUTE_CHANGE_USERNAME, CONFIG.get("default_user_change_username", True)
          ):
              if prompt_data.get("username") != request.user.username:
                  ak_message("Not allowed to change username.")
                  is_allowed = False

          return is_allowed
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
