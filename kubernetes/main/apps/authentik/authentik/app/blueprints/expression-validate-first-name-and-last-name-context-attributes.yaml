version: 1
metadata:
  name: Expression Policy - Validate first_name and last_name Context Attributes
context: {}
entries:
- model: authentik_blueprints.metaapplyblueprint
  attrs:
    identifiers:
      name: Expression Policy - Validate Generic Prompt Field Data
    required: true

- model: authentik_policies_expression.expressionpolicy
  id: validate-first_name-and-last-name-context-attributes-expression-policy
  identifiers:
    name: validate-first_name-and-last_name-context-attributes-expression-policy
  attrs:
    expression:  |
      from re import compile
      from authentik.lib.config import CONFIG

      USER_ATTRIBUTE_NAME_REGEX = "better-blueprints/users/name-regex"
      USER_ATTRIBUTE_NAME_VALIDATION_ERROR_MESSAGE = "better-blueprints/users/name-validation-error-message"

      # Check if the user is anonymous
      if request.user.is_anonymous:
          regex = CONFIG.get(
              "better_blueprints_default.users.name_regex",
              "^[a-zA-Z]{2,20}$"
          )
          err_msg = CONFIG.get(
              "better_blueprints_default.users.name_validation_error_message",
              "Names must contain only alphabetic characters and be between 2 and 20 characters long"
          )
      else:
          regex = request.user.group_attributes(request.http_request).get(
              USER_ATTRIBUTE_NAME_REGEX,
              CONFIG.get(
                  "better_blueprints_default.users.name_regex",
                  "^[a-zA-Z]{2,20}$"
              )
          )
          err_msg = request.user.group_attributes(request.http_request).get(
              USER_ATTRIBUTE_NAME_VALIDATION_ERROR_MESSAGE,
              CONFIG.get(
                  "better_blueprints_default.users.name_validation_error_message",
                  "Names must contain only alphabetic characters and be between 2 and 20 characters long"
              )
          )

      regex = compile(str(regex))

      result = ak_call_policy(
          "validate-generic-prompt-field-data-expression-policy",
          _validator=lambda x: regex_match(str(x), regex),
          _fields=("first_name", "last_name"),
      )

      if not result.passing and err_msg:
          ak_message(err_msg)

      return result.passing
