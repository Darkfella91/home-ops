version: 1
metadata:
  name: Expression Policy - Validate Password
context: {}
entries:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_blueprints.metaapplyblueprint
  attrs:
    identifiers:
      name: Password Policy - Default
    required: true

- model: authentik_blueprints.metaapplyblueprint
  attrs:
    identifiers:
      name: Password Policy - Secure
    required: true
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_policies_expression.expressionpolicy
  id: validate-password-expression-policy
  identifiers:
    name: validate-password-expression-policy
  attrs:
    expression: |
      from authentik.lib.config import CONFIG

      USER_ATTRIBUTE_ADMIN_REQUIRE_SECURE_PASSWORD = "better-blueprints/admins/require-secure-password"
      USER_ATTRIBUTE_USER_REQUIRE_SECURE_PASSWORD = "better-blueprints/users/require-secure-password"

      # Check if the user is anonymous
      if request.user.is_anonymous:
          user_policy_secure = CONFIG.get_bool(
              "better_blueprints_default.users.require_secure_password",
              False
          )
      else:
          admin_policy_secure = request.user.group_attributes(request.http_request).get(
              USER_ATTRIBUTE_ADMIN_REQUIRE_SECURE_PASSWORD,
              CONFIG.get_bool(
                  "better_blueprints_default.admins.require_secure_password", # ENV: AUTHENTIK_BETTER_BLUEPRINTS_DEFAULT__ADMINS__REQUIRE_SECURE_PASSWORD
                  True
              )
          )

          user_policy_secure = request.user.group_attributes(request.http_request).get(
              USER_ATTRIBUTE_USER_REQUIRE_SECURE_PASSWORD,
              CONFIG.get_bool(
                  "better_blueprints_default.users.require_secure_password", # ENV: AUTHENTIK_BETTER_BLUEPRINTS_DEFAULT__USERS__REQUIRE_SECURE_PASSWORD
                  False
              )
          )

      if request.user.is_superuser:
          result = ak_call_policy(
              "secure-password-policy" if admin_policy_secure else "default-password-policy"
          )
      else:
          result = ak_call_policy(
              "secure-password-policy" if user_policy_secure else "default-password-policy"
          )

      for msg in result.messages:
          ak_message(msg)

      return result.passing

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
