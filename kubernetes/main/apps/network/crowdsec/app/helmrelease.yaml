---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: crowdsec
spec:
  interval: 30m
  chart:
    spec:
      chart: crowdsec
      version: 0.16.0
      sourceRef:
        kind: HelmRepository
        name: crowdsec
        namespace: flux-system
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    image:
      repository: crowdsecurity/crowdsec
      pullPolicy: IfNotPresent
      tag: v1.6.4@sha256:091229068a9dab7f8c1ae41086669620da2980c6ccc26f9e358a75aaa7cb4a27
    config:

      profiles.yaml: |
        name: default_ip_remediation
        #debug: true
        filters:
        - Alert.Remediation == true && Alert.GetScope() == "Ip"
        decisions:
        - type: ban
          duration: 4h
        duration_expr: Sprintf('%dh', (GetDecisionsCount(Alert.GetValue()) + 1) * 4)
        notifications:
        - pushover
        on_success: break
        ---
        name: default_range_remediation
        #debug: true
        filters:
        - Alert.Remediation == true && Alert.GetScope() == "Range"
        decisions:
        - type: ban
          duration: 4h
        duration_expr: Sprintf('%dh', (GetDecisionsCount(Alert.GetValue()) + 1) * 4)
        notifications:
        - pushover
        on_success: break

      notifications:
        http.yaml: |
          type: http
          name: pushover

          log_level: info

          group_wait: "30s"
          group_threshold: 10
          max_retry: 5
          timeout: "10s"

          #-------------------------
          #plugin-specific options

          # The following template receives a list of models.Alert objects
          # The output goes in the http request body
          format: |
            {
            "token": $$CROWDSEC_PUSHOVER_TOKEN,
            "user": $$PUSHOVER_USER_KEY,
            "message": "{{`{{range . -}}{{$alert := . -}}{{range .Decisions -}}<b>{{.Value}}</b> will get <b>{{.Type}}</b> for the next <b>{{.Duration}}</b> for triggering <b>{{.Scenario}}</b>.\r\n https://www.shodan.io/host/{{.Value}}{{end -}}{{end -}}`}}",
            "html": "1",
            "title": "Scenario triggered on IDS/IPS !"
            }
          url: https://api.pushover.net/1/messages.json
          method: POST
          headers:
            Content-Type: "application/json"

      config.yaml.local: |
        api:
          server:
            auto_registration:
              enabled: true
              token: "$$REGISTRATION_TOKEN"
              allowed_ranges:
                - 172.16.0.0/16
        db_config:
          type:     postgresql
          user:     $${DB_USER}
          password: $${DB_PASSWORD}
          db_name:  crowdsec
          host:     postgres17-rw.database.svc.cluster.local
          port:     5432
          sslmode:  require

    container_runtime: containerd

    agent:
      acquisition:
        - namespace: network
          podName: nginx-external-controller-*
          program: nginx
          poll_without_inotify: true

        - namespace: media
          podName: jellyseerr-*
          program: jellyseerr
          poll_without_inotify: true

        - namespace: vaultwarden
          podName: vaultwarden-*
          program: VAULTWARDEN
          poll_without_inotify: true

        - namespace: idp
          podName: keycloak-0
          program: keycloak
          poll_without_inotify: true

      env:
        - name: PARSERS
          value: "crowdsecurity/cri-logs crowdsecurity/whitelists crowdsecurity/geoip-enrich"

        - name: COLLECTIONS
          value: "crowdsecurity/modsecurity inherent-io/keycloak LePresidente/jellyseerr crowdsecurity/nginx Dominic-Wagner/vaultwarden crowdsecurity/base-http-scenarios crowdsecurity/http-cve crowdsecurity/http-dos crowdsecurity/whitelist-good-actors"

      metrics:
        enabled: true
        serviceMonitor:
          enabled: true

    lapi:
      deployAnnotations:
        reloader.stakater.com/auto: "true"

      extraInitContainers:
        - name: initdb
          image: "ghcr.io/buroa/postgres-init:17.2@sha256:92f971d2d9ebe4b060b4bc44dfb13e0baaf68489184b742fae42cc83c7a78c0c"
          imagePullPolicy: IfNotPresent

          envFrom:
            - secretRef:
                name: &secret crowdsec-secret

      persistentVolume:
        data:
          enabled: false

        config:
          enabled: false

      storeCAPICredentialsInSecret: true

      env:
        - name: CROWDSEC_PUSHOVER_TOKEN
          valueFrom:
            secretKeyRef:
              name: *secret
              key: CROWDSEC_PUSHOVER_TOKEN

        - name: PUSHOVER_USER_KEY
          valueFrom:
            secretKeyRef:
              name: *secret
              key: PUSHOVER_USER_KEY

        - name: DISABLE_ONLINE_API
          value: "false"

        - name: ENROLL_KEY
          valueFrom:
            secretKeyRef:
              name: *secret
              key: ENROLL_KEY

        - name: ENROLL_INSTANCE_NAME
          value: "cluster"

        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *secret
              key: INIT_POSTGRES_PASS

        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: *secret
              key: INIT_POSTGRES_USER

        - name: BOUNCER_KEY_NGINX_EXTERNAL
          valueFrom:
            secretKeyRef:
              name: *secret
              key: BOUNCER_KEY_NGINX_EXTERNAL

      metrics:
        enabled: true
        serviceMonitor:
          enabled: true

    appsec:
      enabled: true

      acquisitions:
        - source: appsec
          listen_addr: "0.0.0.0:7422"
          path: /
          appsec_config: crowdsecurity/appsec-default
          labels:
            type: appsec

      env:
        - name: COLLECTIONS
          value: "crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules"
        - name: APPSEC_CONFIGS
          value: "crowdsecurity/appsec-default"
